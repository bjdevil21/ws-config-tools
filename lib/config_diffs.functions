#!/usr/bin/env bash

# HELPER FUNCTIONS

source ./lib/config_diffs.settings || exit 1

# Help() - Output help docs
function Help() {
  # Display Help
  echo ""
  echo "Webspark 2 configuration file diff checker"
  echo ""
  echo "Generates and opens a diff file between the project's current config files and your local D9 site's"
  echo "exported, active config files. By default, the diff file (and most related output files) deleted after the"
  echo "is closed."
  echo ""
  echo "Notes:"
  echo " * Read and follow instructions in the README.md before trying to use this script because you must:"
  echo "   1) Configure some values before running it."
  echo "   2) Run the script once with the -R option before 1) using it the first time and 2) before starting a new task."
  echo " * This script currently only checks a project's three possible ./config directories (per Drupal standards)."
  echo "   It does not check any other YML files in the project (root directory or elsewhere)."
  echo ""
  echo "Options:"
  echo "  -m - Keep diff and command files for manual review"
  echo "  -g - Interactively verify Git branch status for each project"
  printf "  -r - Re-run Drush export of active configs into ~/%s \n" "${CONF_EXPORT_DIR}"
  printf "  -R - Runs -r, then regenerates %s (do this ONCE before starting any new task/ticket)\n" "${COPY_EXPORT_START_DIR}"
  echo "  -p - Generate a working .patch file in ./config for single projects"
  echo "  -P - Delete existing generated .patch files, then skip all other processing"
  echo "  -S - Skip Drush check if project is enabled (doing this while diffing disabled projects will bloat the diff file)"
  echo "  -V - Verbose output"
  echo "  -z - Extra careful mode (same as '-mgr')"
  echo "  -Z - Extra careful mode (Verbose)"
  echo "  -v - Returns script version"
  echo "  -h - Returns this help message"
  exit 0
}

# Is the project a valid Drupal project to check?
# $1 (int) - Directory to be checked
function ProjectVerify() {
  local ProjectVerified=0
  [[ ( $1 =~ webspark+(-|_)module+(-|_).* || $1 =~ webspark+(-|_)theme+(-|_).* || $1 =~ webspark+(-|_)profile+(-|_).* ) && \
   -d "${ABS_PROJECTS_DIR}/$1/config" ]] && ProjectVerified=1
  echo ${ProjectVerified}
}

# Prepare active configs, start point configs directories
function PrepConfigDirs() {
  ## Active (EXPORTED) confs dir
  if [[ -d "${ABS_CONF_EXPORT_DIR}" ]]; then
    YML_COUNT=$(GetYMLData "${ABS_CONF_EXPORT_DIR}" 1)
    if [[ ${YML_COUNT} != 0 ]]; then
      # check active confs age
      CheckConfigAge "${ABS_CONF_EXPORT_DIR}" "Active"
      if [[ ${RERUN_EXPORT} == 1 ]]; then
        Verbose "Emptying %s directory..." "${ABS_CONF_EXPORT_DIR}"
        rm "${ABS_CONF_EXPORT_DIR}"/*
        Verbose "DONE.\n"
      fi
    else
      RERUN_EXPORT=1 # Dir has no YML files
    fi
  else
    Verbose "\nNotice: %s does not exist. Creating directory..." "${ABS_CONF_EXPORT_DIR}"
    mkdir -p "${ABS_CONF_EXPORT_DIR}" || exit 1
    Verbose "DONE.\n"
    RERUN_EXPORT=1 # Dir has no YML files
  fi
  ## Start (EXPORTED) configs directory
  if [[ ! -d "${COPY_EXPORT_START_DIR}" ]]; then
    Verbose "\nNotice: %s does not exist. Creating directory..." "${COPY_EXPORT_START_DIR}"
    mkdir -p "${COPY_EXPORT_START_DIR}"
    # Active configs can't be older than start configs... clear the directory
    Verbose "Emptying active export directory %s to reset it to new start config directory build..." "${ABS_CONF_EXPORT_DIR}"
    rm "${ABS_CONF_EXPORT_DIR}"/*
    Verbose "DONE.\n"
    RERUN_EXPORT=1
    COPY_EXPORT_START=1
  fi

  # Drush rerun configs export(s)
  if [[ ${RERUN_EXPORT} == 1 ]]; then

    ## Rebuild current/active configs directory
    Verbose "Drush exporting the local dev site\'s config files into %s...\n" "${ABS_CONF_EXPORT_DIR}"
    cd "${ABS_WEB_ROOT}" || exit 1
    drush cex --destination="${RERUN_EXPORT_DIR}"
    echo ""

    # Remove site-specific settings from exported active YMLs
    # https://www.drupal.org/docs/distributions/creating-distributions/how-to-write-a-drupal-installation-profile#s-configuration)
    Verbose "Cleaning out default local site UUIDs, etc. from exported YMLs..."
    find "${ABS_CONF_EXPORT_DIR}"/ -type f -exec sed -i -e '/^uuid: /d' {} \;
    find "${ABS_CONF_EXPORT_DIR}"/ -type f -exec sed -i -e '/_core:/,+1d' {} \;
    Verbose "DONE\n"
    echo ""

    ## Rebuild start configs directory (OPTIONAL)
    if [[ ${COPY_EXPORT_START} == 1 ]]; then
      if [[ $(GetYMLData "${COPY_EXPORT_START_DIR}" 1) != 0 ]]; then
        # Check Start configs age
        CheckConfigAge "${COPY_EXPORT_START_DIR}" "Start"
        BarrierMajor
        printf "WARNING: %s already exists, and presumably has your configurations from before you started this task.\n" "${COPY_EXPORT_START_DIR}"
        printf "Are you sure you want to overwrite it? (Enter Y to continue): "
        read -r OverwriteStart
        if [[ "${OverwriteStart}" == "Y" ]]; then
          BarrierMajor
          printf "\nOverwriting %s directory in 3 seconds " "${COPY_EXPORT_START_DIR}"
          ConsoleTimer 3 " "
          rm -rf "${COPY_EXPORT_START_DIR}" || exit 1
          cp -pr "${ABS_CONF_EXPORT_DIR}" "${COPY_EXPORT_START_DIR}" || exit 1
          printf "DONE.\n\n"
          BarrierMajor
        else
          BarrierMinor
          printf "NOTICE: Keeping older version of %s.\n" "${COPY_EXPORT_START_DIR}"
          BarrierMinor
        fi
      else
        Verbose "WARNING: No %s with YML files detected.\n" "${COPY_EXPORT_START_DIR}"
        Verbose "Make sure to create this directory before work on a YML-altering\n"
        Verbose "task was started. If that didn't happen, then be sure to double\n"
        Verbose "check for new YML files created in the active_config directory\n"
        Verbose "and review the conf sync output in the Drupal UI.\n\n"
        printf "Copying %s over to %s..." "${ABS_CONF_EXPORT_DIR}" "${COPY_EXPORT_START_DIR}"
        cp -pr "${ABS_CONF_EXPORT_DIR}"/* "${COPY_EXPORT_START_DIR}"/ || exit 1
        printf "DONE.\n\n"
      fi
    fi
  else # Skip any Drush exports, but check for YML files
    if [[ "${YML_COUNT}" == 0 ]]; then
      Issue "No YML files exist in ${RERUN_EXPORT_DIR}.\nRe-run with -r or -R to rebuild the active configs with Drush. Closing." "${WCT_ERROR}"
      exit 1
    else
      Verbose "\nINFO: %s YML files found in %s directory, so skipping drush export and cleanup (by default).\n" "${YML_COUNT}" "${CONF_EXPORT_DIR}"
      # shellcheck disable=SC2046
      Verbose " - YMLs last update: $(date -d @$(stat -c '%Y' .))\n"
    fi
  fi
}

# GetYMLData - Gets data (list or count) of YML files in a directory
# $1 (str) - Exported config directory to check
# $2 (int) - 0 or 1; If 1, return count (instead of YML list)
# returns (int) file count
function GetYMLData() {
  local YamlData
  local ReturnCount=$2
  YamlData=$(find "${1}" -maxdepth 1 -type f -name "*.yml" -printf "%f\n" 2>/dev/null | sort )
  if [[ $ReturnCount == 1 ]]; then
    YamlData=$(echo "${YamlData}" | wc -l )
  fi
  echo "${YamlData}"
}

# Resets project directory paths, conf diffs file for current project
# $1 (int) - Assigned project number from assembled list
# $2 (int) - If 1, output current project messaging (defaults to no output)
function UpdateProjDirPaths() {
  if [[ $2 == 1 ]]; then
    printf "\n\n%s\n" "$(printf "## Project %d - %s ##" "$1" "${PROJECTS_AVAILABLE[$1]}")"
  fi
  PROJ_DIR="${PROJECTS_AVAILABLE[$1]}"
  ABS_PROJ_DIR="${ABS_PROJECTS_DIR}${PROJ_DIR}"
  ABS_PROJ_CONF_DIR="${ABS_PROJ_DIR}/config"
  # shellcheck disable=SC2034
  OUTPUT_TOTAL="${ABS_PROJ_CONF_DIR}/${DIFFS}"
}

# Various tasks that do not need any project generation, etc.
function NonDiffsTasks() {
  # Just deleting patches? Run and exit (-P option)
  if [[ $PATCH_MODE == -1 ]]; then
    BarrierMajor 1
    printf "Deleting any script-generated patch files (if they exist)...\n"
    find "${ABS_PROJECTS_DIR}" -type f -name "*${PATCH_SUFFIX}" -exec rm -v {} \;
    find "${SCRIPT_ROOT}" -type f -name "*${PATCH_SUFFIX}" -exec rm -v {} \;
    printf "DONE. Closing.\n"
    exit 0
  fi
  # Get Drupal spinup date once for CheckConfigAge
  local CurrentDir
  CurrentDir=$(pwd)
  cd "${ABS_WEB_ROOT}" || exit 1
  DRUPAL_DB_INIT_DATE="$(drush sql:query "USE information_schema; SELECT UNIX_TIMESTAMP(CREATE_TIME) FROM information_schema.TABLES WHERE TABLE_SCHEMA = 'ws2' AND TABLE_NAME = 'config' ;")"
  cd "${CurrentDir}" || exit 1
}

# Checks if active & start config dirs are newer than the current Drupal install
# $1 (str) - Absolute directory to exported configs
# $2 (str) - Should be "Active" or "Start". No business logic - Informational only)
function CheckConfigAge() {
  # Verify start_time data to be newer than the current Drupal install (needs to be rebuilt)
  local Configs
  local ConfigsDir=$1
  local ConfigsType=$2
  local CurrentDir

  CurrentDir=$(pwd)
  cd "${ABS_WEB_ROOT}" || exit 1
  Configs=$(ls -At "${ConfigsDir}" | grep -E "^.+.yml$" | head -1 | xargs -I {} stat -c "%W" "${ConfigsDir}"/{})
  [[ $_V == 1 ]] && BarrierMinor
  # shellcheck disable=SC2086
  Verbose "Drupal spinup: $(date -d @${DRUPAL_DB_INIT_DATE}) - $(TimeToAgo ${DRUPAL_DB_INIT_DATE}) \n"
  # shellcheck disable=SC2086
  Verbose "${ConfigsType} config: $(date -d @${Configs}) - $(TimeToAgo ${Configs})\n"
  if [[ -n $(echo "${Configs}") ]]; then # Not empty?
    if [[ $((Configs-DRUPAL_DB_INIT_DATE)) -le 0 ]]; then
      Issue "The ${ConfigsType} directory's YMLs are older than your Drupal installation timestamp and are likely invalid." "${WCT_WARNING}"
      Verbose "Did you run this script once with -r, -R, or -Z AFTER reinstalling Drupal to start this ticket?\n\n"
      ConfirmToContinue
    else
      Verbose "OK: Your ${ConfigsType} configurations are (likely) populated from this Drupal install.\n"
    fi
  else
    Issue "The creation date of the exported ${ConfigsType} configs cannot be found. Check the ${ConfigsType} configs directory for YML files. Exiting..." "${WCT_ERROR}"
    exit 1
  fi
  [[ $_V == 1 ]] && BarrierMinor
  cd "${CurrentDir}" || exit 1
}

# Generate bash file with diff commands and execute it to generate diffs
# $1 (str) - Active configuration directory (Drush exported), absolute
# $2 (str) - Configuration directory of current project, absolute
# $3 (str) - Path of diff commands file
# $4 (str) - Active configuration directory (Drush exported), relative from user root
# $5 (str) - Generated diffs output file
# $6 (str) - Project directory
# $7 (str) - Subdirectory from project's ./config directory, OR "new" OR "modified"
function GenerateDiffs() {
  local AbsConfExportDir=$1
  local AbsProjConfDir=$2
  local CommandsFile=$3
  local ConfExportDir=$4
  local Diffs=$5
  local ProjDir=$6
  local Type=$7 # set file path, vs...
  local TypeOutput=$Type # business/case logic and verbose output text
  local Demarcator='/'
  local DiffsPrefix='../'
  if [[ ${TypeOutput} == 'new' || ${TypeOutput} == 'modified' ]]; then # Remove config subdirectory from related paths
    Demarcator=''
    Type=''
    DiffsPrefix="_${TypeOutput}"
    # shellcheck disable=SC2188
    > "${DiffsPrefix}${Diffs}"
  fi

  FILES_GENERATED+=("${AbsProjConfDir}${Demarcator}${Type}/${CommandsFile}")
  Verbose "\n"
  if [[ ${TypeOutput} == 'new' || ${TypeOutput} == 'modified' ]]; then
    # Generate diffs to add non-project YMLs with different "staged" (<) and active (>) configs
    Verbose "Processing %s YML files by... \n" "${TypeOutput}"
  else
    # Diffs for a single project "${ProjDir}"
    Verbose "Comparing %s/config/%s and %s configs by... \n" "${ProjDir}" "${TypeOutput}" "${ConfExportDir}"
  fi

  Verbose " - 1 of 2) Generating %s in %s..." "${CommandsFile}" "${AbsProjConfDir}"
  perl -pi -e 's/^.*(?<!\.yml)$//g' "${CommandsFile}" && sed -i '/^[[:space:]]*$/d' "${CommandsFile}" && sed -i '/^[[:blank:]]*$/ d' "${CommandsFile}"
  perl -pi -e "s!^(.+?)\$!diff -uN ${AbsProjConfDir}${Demarcator}${Type}/\$1 ${AbsConfExportDir}/\$1 >> ${DiffsPrefix}${Diffs}!g" "${CommandsFile}"
  Verbose "DONE\n"
  if [[ ${TypeOutput} == 'new' || ${TypeOutput} == 'modified' ]]; then
    Verbose " - 2 of 2) Creating %s YML file diffs to %s/config/%s..." "${TypeOutput}" "${ProjDir}" "${DiffsPrefix}${Diffs}"
  else
    Verbose " - 2 of 2) Creating %s diffs for %s/config/%s..." "${TypeOutput}" "${ProjDir}" "${Diffs}"
  fi
  bash "${CommandsFile}"
  Verbose "DONE\n"
}

# Append diffs to "ALL" option output files; Optionally generate patch content
# $1 (str) - "${ABS_PROJ_CONF_DIR}"
# $2 (str) - TypeOutput ("", new or modified)
function GenerateOptionalDiffs() {
  local AbsProjConfDir=$1
  local TypeOutput=$2
  local Diffs="${DIFFS}"
  if [[ ${TypeOutput} == 'new' || ${TypeOutput} == 'modified' ]]; then # Remove config subdirectory from related paths
    Diffs="_${TypeOutput}${Diffs}"
    FILES_GENERATED+=("${AbsProjConfDir}/${CommandsFile}.ROO.${TypeOutput}.bash" "${AbsProjConfDir}/${Diffs}")
  fi
  if [[ -s "${Diffs}" ]]; then # DIFFS not empty?
    # ALL projects logging
    if [[ $FIRST_PROJECT != "${LAST_PROJECT}" ]]; then
      if [[ ${TypeOutput} == 'new' || ${TypeOutput} == 'modified' ]]; then # Remove config subdirectory from related paths
       echo "##NO-PATCH## - $(Issue "Reviewing ${TypeOutput} YML files..." "${WCT_OK}" 1)" >> "${ALL_DIFFS}"
      fi
      Verbose " - ALL bonus) Adding project diff contents to %s..." "${ALL_DIFFS}"
      cat "${Diffs}" >> "${ALL_DIFFS}"
      Verbose "DONE\n\n"
    # Single project
    else
      if [[ ${TypeOutput} == 'new' || ${TypeOutput} == 'modified' ]]; then # append to original diffs file
        cat "${Diffs}" >> "${DIFFS}"
      fi
    fi
    ## PATCH MODE
    [[ "${PATCH_MODE}" == 1 ]] && PatchMode
  else
    BarrierMinor 1
    echo "IMPORTANT: No differences were detected in any project YML files."
    BarrierMinor 2
   [[ $FIRST_PROJECT != "${LAST_PROJECT}" ]] && echo "##NO-PATCH## - $(Issue "${Diffs} is empty - Nothing to add..." "${WCT_OK}" 1 )" >> "${ALL_DIFFS}"
  fi
}

# PATCH MODE - Create patch output and append to appropriate output file
# $1 (str) - Type of output (default is empty; "new" or "modified" options)
function PatchMode() {
  local PatchKey
  [[ $_V == 1 ]] && BarrierMinor
  Verbose "** PATCH_MODE: Patch file for ${PROJ_DIR} being made..."
  cp "${OUTPUT_TOTAL}" "${OUTPUT_TOTAL}${PATCH_SUFFIX}"
  ### Swap files in diff for patching (patch -R reversal option not working, possibly due to different -pN levels)
  perl -0pi -e "s|(\-\-\-\s)(${USER_DIR_ROOT}\N+?)(\n)(\+\+\+\s)(${USER_DIR_ROOT}\N+?)(\n)|"'$1$5$3$4$2$6'"|g" "${OUTPUT_TOTAL}${PATCH_SUFFIX}"
  Verbose "DONE\n"
  [[ $_V == 1 ]] && BarrierMinor

  ### Generate and store patch command
  IFS='/' read -r -a Nth <<< "${ABS_PROJ_CONF_DIR}/"
  PatchKey=$( echo "${ABS_PROJ_CONF_DIR}/${DIFFS}" | sed -E "s|${USER_DIR_ROOT}||g" | sed -E 's|[/_\.]||g' )
  if [[ -z ${PATCH_COMMANDS["${PatchKey}"]} ]]; then # if doesn't already exist
    # local Timestamp=$(date +%s%4N) # Unix Timestamp down to 0.0001 sec
    PATCHES_ORDER+=("${PatchKey}")
    PATCHES_GENERATED+=([${PatchKey}]="${ABS_PROJ_CONF_DIR}/${DIFFS}")
    PATCH_COMMANDS+=([${PatchKey}]="$(printf "patch -d %s -p%d -Er ./ < %s%s\n" "${ABS_PROJ_CONF_DIR}" "${#Nth[@]}" "${OUTPUT_TOTAL}" "${PATCH_SUFFIX}")")
  fi
  ### ALL projects logging
  if [[ $FIRST_PROJECT != "${LAST_PROJECT}" ]]; then
    cat "${OUTPUT_TOTAL}${PATCH_SUFFIX}" >> "${ALL_DIFFS}${PATCH_SUFFIX}"
  fi
}
