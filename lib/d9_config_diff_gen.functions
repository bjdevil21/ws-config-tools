#!/usr/bin/env bash

# HELPER FUNCTIONS

# Help() - Output help docs
Help() {
  # Display Help
  echo ""
  echo "Webspark 2 configuration file diff checker"
  echo ""
  echo "Generates and opens a diff file between the project's current config files and your local D9 site's"
  echo "exported, active config files. By default, the diff file (and most related output files) deleted after the"
  echo "is closed."
  echo ""
  echo "Notes:"
  echo " * Read and follow instructions in the README.md before trying to use this script because you must:"
  echo "   1) Configure some values before running it."
  echo "   2) Run the script once with the -R option before 1) using it the first time and 2) before starting a new task."
  echo " * This script currently only checks a project's three possible ./config directories (per Drupal standards)."
  echo "   It does not check any other project's YML files (in the root directory or elsewhere in the project."
  echo ""
  echo "Flags (options):"
  echo "  -m - Keep diff and command files for manual review"
  echo "  -g - Interactively verify Git branch status for each project"
  printf "  -r - Re-run Drush export of active configs into ~/%s \n" "${CONF_EXPORT_DIR}"
  echo "  -R - -r plus creates/overwrites second 'starting point' export dir (to compare later for new YML files)"
  echo "  -p - Create an appliable .patch file (using patch, not git apply) in ./config for single projects"
  echo "  -c - Skip Drush check if project is enabled (using this on disabled projects will bloat the diff output)"
  echo "  -V - Verbose output"
  echo "  -z - Extra careful mode (runs m, g, r)"
  echo "  -Z - Extra careful mode (same as above, only verbosely"
  echo "  -v - Returns version of script"
  echo "  -h - Returns this help message"
  exit 0
}
# Is the project a valid project to check?
# $1 (int) - Directory to be checked
ProjectVerify() {
  local ProjectVerified=0
  [[ ( $1 =~ webspark+(-|_)module+(-|_).* || $1 =~ webspark+(-|_)theme+(-|_).* || $1 =~ webspark+(-|_)profile+(-|_).* ) && \
   -d "${ABS_PROJECTS_DIR}/$1/config" ]] && ProjectVerified=1
  echo ${ProjectVerified}
}
# Prepare active configs directory
# No input params
PrepConfigDirs() {
  if [[ -d "${ABS_CONF_EXPORT_DIR}" ]]; then
    YML_COUNT=$(GetYMLCount "${ABS_CONF_EXPORT_DIR}")
    if [[ ${YML_COUNT} != 0 ]]; then
      if [[ ${RERUN_EXPORT} == 1 ]]; then
        Verbose "Emptying %s directory..." "${ABS_CONF_EXPORT_DIR}"
        rm "${ABS_CONF_EXPORT_DIR}"/*
        Verbose "DONE.\n"
      fi
    else
      RERUN_EXPORT=1 # Dir has no YML files
    fi
  else
    Verbose "\nNotice: %s does not exist. Creating directory..." "${ABS_CONF_EXPORT_DIR}"
    mkdir -p "${ABS_CONF_EXPORT_DIR}" || exit 1
    Verbose "DONE.\n"
    RERUN_EXPORT=1 # Dir has no YML files
  fi
  if [[ -d "${COPY_EXPORT_START_DIR}" ]]; then
    if [[ $(GetYMLCount "${COPY_EXPORT_START_DIR}" == 0) ]]; then
      COPY_EXPORT_START=1
    fi
  fi
}

# GetYMLCount - Counts number of YML files in a directory
# $1 (str) - Exported config directory to check
# returns (int) file count
GetYMLCount() {
  # find "${1}" -type f -not -name "*.yml" -exec rm {} \; >/dev/null 2>&1 # Delete non-YML files from config dir
  find "${1}" -type f -name "*.yml" 2>/dev/null | wc -l
}

# Resets config directory names/locations
# $1 (int) - Assigned project number from assembled list
# $2 (int) - If 1, output current project messaging
UpdateConfDirs() {
  if [[ $2 == 1 ]]; then
    printf "\n\n%s\n" "$(printf "## Project %d - %s ##" "$1" "${PROJECTS_AVAILABLE[$1]}")"
  fi
  SRC_DIR="${PROJECTS_AVAILABLE[$1]}"
  ABS_SRC_DIR="${ABS_PROJECTS_DIR}${SRC_DIR}"
  ABS_SRC_CONF_DIR="${ABS_SRC_DIR}/config"
  OUTPUT_TOTAL="${ABS_SRC_CONF_DIR}/${DIFFS}"
}
